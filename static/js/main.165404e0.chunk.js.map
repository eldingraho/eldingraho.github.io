{"version":3,"sources":["components/SearchBox.tsx","components/SynonymList.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["SearchBox","props","className","action","defaultValue","onSubmit","this","submitHandler","placeholder","autoComplete","type","name","value","Component","SynonymList","searchWord","canUpdate","searchList","length","map","item","key","word","style","textAlign","id","App","handleSubmit","e","preventDefault","target","wordSearch","toLowerCase","findWord","wordAdd","addWord","update","found","state","wordList","find","setState","filter","synonymGroup","console","log","activeSearchWord","canUpdateList","mainWord","assignToGroup","group","tempState","push","bind","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.165404e0.chunk.js","sourcesContent":["import React, { Component } from 'react'\r\n\r\ninterface customProps {\r\n    submitHandler: (event: React.FormEvent) => void\r\n}\r\n\r\nexport class SearchBox extends Component<customProps> {\r\n\r\n    constructor (props:customProps){\r\n        super(props)\r\n    }\r\n    render() {\r\n        return (\r\n            <div className=\"searchBox flexContainer\">\r\n                <h2>Search for: </h2>\r\n                <form action=\"submit\" defaultValue=\"ime\" onSubmit={this.props.submitHandler} >\r\n                    <input placeholder=\"Search Word\" autoComplete=\"off\" type=\"search\" name=\"wordSearch\" />\r\n                    <input className=\"submitButton\" type=\"submit\" value=\"Search\" />\r\n                </form>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default SearchBox\r\n","import React, { Component } from 'react'\r\nimport SynonymWord from '../models/Synonym'\r\n\r\n\r\ninterface customProps {\r\n    searchWord: string,\r\n    searchList: SynonymWord[],\r\n    canUpdate: boolean,\r\n    submitHandler: (event: React.FormEvent) => void\r\n}\r\n\r\n\r\nexport class SynonymList extends Component<customProps> {\r\n\r\n    constructor(props: customProps) {\r\n        super(props)\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"synonyms flexContainer\">\r\n                <h3>Synonyms for {this.props.searchWord}</h3>\r\n                {this.props.canUpdate ?\r\n                <div>\r\n                    {\r\n                        this.props.searchList.length ?\r\n                            this.props.searchList.map((item) => {\r\n                                return <span key={item.word} className=\"wordTag\">{item.word}</span>\r\n                            })\r\n                            : <div style={{ textAlign: \"center\" }}>No synonyms found</div>\r\n                    }\r\n                </div> : <div> item can not be assigned </div>\r\n                }\r\n                {\r\n                    this.props.searchWord ?\r\n                        <form action=\"submit\" onSubmit={this.props.submitHandler} >\r\n                            <input placeholder={'Synonyms for: ' + this.props.searchWord} type=\"text\" name=\"wordAdd\" id=\"addword\" />\r\n                            <input className=\"submitButton\" type=\"submit\" value=\"Add\" />\r\n                        </form>\r\n                        : <div></div>\r\n                }\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default SynonymList\r\n","import React, { Component } from 'react';\nimport './App.css';\n\nimport { SearchBox } from './components/SearchBox';\nimport { SynonymList } from './components/SynonymList';\n\nimport { SynonymWord } from \"./models/Synonym\";\n\ninterface State {\n  searchList: SynonymWord[],\n  wordList: SynonymWord[],\n  searchWord: string,\n  activeSearchWord: string,\n  canUpdateList: boolean,\n}\n\n\nclass App extends Component<{}, State> {\n\n\n  constructor(props: any) {\n    super(props)\n\n    this.state = {\n      canUpdateList: true,\n      searchList: [],\n      wordList: [\n        { word: 'one', synonymGroup: 3 },\n        { word: 'two', synonymGroup: 1 },\n        { word: 'three', synonymGroup: 2 },\n        { word: 'four', synonymGroup: 1 },\n        { word: 'five', synonymGroup: 3 },\n        { word: 'six', synonymGroup: 3 },\n        { word: 'very very logn word', synonymGroup: 2}\n      ],\n      searchWord: '',\n      activeSearchWord: ''\n    }\n    this.handleSubmit = this.handleSubmit.bind(this)\n  }\n\n  private handleSubmit = (e: any) => {\n    e.preventDefault();\n    if (e.target.wordSearch) {\n      let word = e.target.wordSearch.value.toLowerCase()\n      if (word) this.findWord(word)\n    } else {\n      let word = e.target.wordAdd.value.toLowerCase()\n      this.addWord(word)\n    }\n  }\n\n  private findWord = (word: string, update:boolean = true) => {\n    let found = this.state.wordList.find(item => item.word === word)\n    if(update) \n    \n    this.setState({ searchWord: word })\n\n    if (found) {\n      this.setState({\n        searchList: this.state.wordList.filter(item => item.synonymGroup === found.synonymGroup)\n      })\n      return found\n    } else {\n      this.setState({ searchList: [] })\n    }\n    console.log('findword function', found)\n    this.setState({activeSearchWord: word})\n    return null\n  }\n\n  private addWord = (word: any) => {\n    let id = this.state.wordList.length\n\n    //if word already belongs to some group\n    if(this.findWord(word, false)) return () => {this.setState({canUpdateList:false})}\n\n    //if main word already has synonym\n    let mainWord = this.findWord(this.state.searchWord)\n    if(mainWord) return this.assignToGroup(word, mainWord.synonymGroup)\n\n    //if main word has no synonyms\n    this.assignToGroup(this.state.searchWord, id)\n  }\n\n  private assignToGroup = (word: any, group: number) => {\n    this.setState({canUpdateList: true})\n    let tempState = this.state.wordList\n    tempState.push({word:word, synonymGroup: group})\n    this.setState({wordList: tempState})\n    console.log('current status: ', this.state.wordList)\n    this.setState({searchWord: word})\n    this.setState({...this.state})\n  }\n\n  render() {\n    return (\n      <div className=\"SyApp\" >\n        <SearchBox submitHandler={this.handleSubmit} />\n        <SynonymList  submitHandler={this.handleSubmit} \n                      searchList={this.state.searchList} \n                      searchWord={this.state.searchWord}\n                      canUpdate={this.state.canUpdateList} />\n      </div>\n    );\n  }\n}\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}